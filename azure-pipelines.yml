variables:
- group: uipath-cicd

trigger:
- master

stages:
  - stage: Build
    displayName: Build artifacts and create change sets
    jobs:
    - job: build
      pool:
        vmImage: 'windows-latest'
      container:
        image: $(containerRegistry).azurecr.io/$(repositoryName):latest
        endpoint: demovmcontainer
      steps:
      - script: c:\UiPath\Robot\UiRobot.exe -pack $(Build.SourcesDirectory)\project.json -o $(Build.ArtifactStagingDirectory)\
        displayName: Build artifact
        name: buildArtifact
      - powershell: |
          Import-Module UiPath.PowerShell
          $token = Get-UiPathAuthToken -URL $(orchUrl) -Username $(uatUsername) -Password $(uatPassword) -TenantName $(uatTenantName)

          $temp = "C:\scripts"
          $link = "https://raw.githubusercontent.com/AndreiBarbuOz/uipath-config/master/cicd-lib.ps1"
          $file = "cicd-lib.ps1"
          New-Item $temp -ItemType directory
          Set-Location -Path $temp
          Set-ExecutionPolicy Unrestricted -force
          Invoke-WebRequest -Uri $link -OutFile $file
          . C:\scripts\cicd-lib.ps1

          $configContent = Get-Content -Path $(Build.SourcesDirectory)\config\config.json | ConvertFrom-Json
          $desiredAssetState = $configContent.assets
          
          Get-AssetChanges -DesiredAssetState $desiredAssetState -Token $token | ConvertTo-Json | Out-File -FilePath $(Build.ArtifactStagingDirectory)\change-set.json
        displayName: Create the change set
        name: buildChangeSet
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: drop
        displayName: Publish build artifacts
  - stage: DeployUAT
    dependsOn: Build
    condition: succeeded()
    displayName: Verify change sets, Deploy to UAT
    jobs:
    - deployment: deployUat
      pool:
        vmImage: 'windows-latest'
      container:
        image: $(containerRegistry).azurecr.io/$(repositoryName):latest
        endpoint: demovmcontainer
      environment: 'uat'
      strategy:
        runOnce:
          deploy:
            steps:
              - powershell: pwd
              - powershell: ls
              - powershell: ls $(Build.SourcesDirectory)
              - powershell: ls $(Build.ArtifactStagingDirectory)
              - download: current
                artifact: drop
                displayName: Download build artifacts
              - powershell: pwd
              - powershell: ls
              - powershell: ls $(Build.SourcesDirectory)
              - powershell: ls $(Build.ArtifactStagingDirectory)
              - powershell: ls $(Pipeline.Workspace)
              - powershell: ls $(Pipeline.Workspace)/drop
#      - powershell: |
#          Import-Module UiPath.PowerShell
#          $token = Get-UiPathAuthToken -URL $(orchUrl) -Username $(uatUsername) -Password $(uatPassword) -TenantName $(uatTenantName)
#
#          Get-ChildItem -Path $(Build.ArtifactStagingDirectory) -Filter *.nupkg | ForEach-Object {Add-UiPathPackage -PackageFile $_.FullName}
#          $package = Get-UiPathPackage -id $project.name 
#
#          Get-UiPathRobot | Format-Table
#          Get-UiPathProcess | Format-Table
#          Get-UiPathPackage | Format-Table
#          Get-UiPathPackageVersion -Package $package | Format-Table
#        displayName: Artifact build
#        name: buildArtifact
  